带参数的main函数和void指针 
1.带参数的main函数 

我们知道除主函数外，函数是可以互相调用的，主函数可以调用其他函数，其他函数不能调用主函数，主函数是被系统调用的。函数调用时可以带参数也可以不带参数，这完全取决于该函数是有参函数还是无参函数。主函数可不可以带参数呢？回答是肯定的，这种参数是在程序运算时给出的所以又叫命令行参数。下面我们就来讨论带参数的主函数。

带参数的main函数原型如下： 

  

返回类型：返回值提供给运行该程序的操作系统，如果返回值为void，表示不需要返回值，如果缺省返回值类型时表示返回值类型为整型。 

主函数有两个参数 

argc:为整型数据，表示命令行中提供的实参个数(包括命令本身)。 

argv：为指针数组变量，该数组的大小由命令行参数的个数决定，该数组是指向命令行字符串的指针数组。 

特别要注意的是:argv[0]指向程序（命令）名； 

               argv[1]指向命令行第一个参数； 

               ……  

srgv[argc-1]指向命令行最后一个参数。 

程序运算格式： 

  

例 显示命令行参数的数量和每个命令行参数 

1 #include <stdio.h> 

2 main(int argc,char *argv[]) 

3 { 

4 int i; 

5     printf("有%d个命令行参数：\n",argc); 

6     for(i=0;i<argc;i++) 

7             printf("argv[%d]:%s\n",i,argv[i]); 

8 } 

输入：D:\>file1 China Beijing 

输出：有3个命令行参数： 

      argv[0]:file1 

      argv[1]:China 

      argv[2]:Beijing 

如果参数本身含有空格，须用双引号括起来。例如： 

输入：D:\file1  "China  Beijing"  "China  Shanghai" 

输出：有3个命令行参数： 

argv[0]:file1 

argv[1]:China Beijing 

argv[2]:China Shanghai 

2.void指针 

void指针为空类型指针，它的定义格式如下： 

  

即空类型指针指向的不是一个有确定类型的数据，它和一般的指针变量有以下不同之处。 

（1）不能直接引用void指针所指向的数据，因为数据类型没有确定，不能执行任何操作，必须先进行相应的类型转换后才能引用，这种转换是强制类型转换。如： 

void  *p; 

*p=30;    /*错误的使用方法*/ 

*（int *）p=30;    /*正确的使用方法*/ 

（2）在进行强制类型转换后void指针变量和其他类型的指针变量允许进行赋值。如： 

void  *p; 

int *q; 

p=(void *)q; 

q=(int *)p; 

void指针最大的好处是可以作为通用类型的指针变量，允许保存任何类型的指针，但要牢记：在使用数据前一定要进行适当的类型转换。 

例 void指针的应用 

1 #include <stdio.h> 

2 void swap(void *x,void *y) 

3 { 

4       int temp; 

5     temp=*(int *)x; 

6     *(int *)x=*(int *)y; 

7     *(int *)y=temp; 

8 }                                                       

9  void main() 

10 { 

11       int a=5,b=3; 

12     printf("a=%d,b=%d\n",a,b); 

13     swap(&a,&b); 

14     printf("a=%d,b=%d\n",a,b); 

15 } 

程序运行结果： 

a=5,b=3 

     a=3,b=5                                 
